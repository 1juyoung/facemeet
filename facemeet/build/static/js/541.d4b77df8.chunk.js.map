{"version":3,"file":"static/js/541.d4b77df8.chunk.js","mappings":"0KAIA,MA2LA,EA3LiBA,KACf,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,IACrCG,GAAcC,EAAAA,EAAAA,QAAO,MACrBC,GAAkBD,EAAAA,EAAAA,QAAO,CAAC,GAC1BE,GAAYF,EAAAA,EAAAA,QAAO,MACnBG,GAAiBH,EAAAA,EAAAA,QAAO,KAoB9BI,EAAAA,EAAAA,YAAU,KAERF,EAAUG,SAAUC,EAAAA,EAAAA,IAAG,yBAEvBJ,EAAUG,QAAQE,GAAG,WAAW,KAC9BC,QAAQC,IAAI,kCAAmCP,EAAUG,QAAQK,GAAG,IAGtER,EAAUG,QAAQE,GAAG,cAAc,KACjCC,QAAQC,IAAI,2BAA2B,IAIzCP,EAAUG,QAAQE,GAAG,cAAeI,IAClCb,EAAaa,GACbH,QAAQC,IAAK,kBAAiBf,MAAciB,EAAM,IAIpDT,EAAUG,QAAQE,GAAG,WAAWK,UAAiD,IAA1C,OAAEC,EAAQnB,SAAUoB,GAAgBC,EAEzE,GADAP,QAAQC,IAAK,QAAOI,kBAAuBC,KACvCA,IAAmBpB,IAAaS,EAAeE,QAAQW,SAASH,GAAS,CAC3EV,EAAeE,QAAQY,KAAKJ,GAC5B,MAAMK,EAAiBC,EAAqBN,GACtCO,QAAcF,EAAeG,oBAC7BH,EAAeI,oBAAoBF,GACzCZ,QAAQC,IAAK,oBAAmBI,cAAmBnB,KACnDQ,EAAUG,QAAQkB,KAAK,QAASH,EAAO1B,EAAUmB,EACnD,KAIFX,EAAUG,QAAQE,GAAG,SAASK,UAAuD,IAAhD,MAAEQ,EAAK,OAAEP,EAAQnB,SAAU8B,GAAeC,EAE7E,GADAjB,QAAQC,IAAK,uBAAsBI,cAAmBW,KAClDA,IAAkB9B,IAAaS,EAAeE,QAAQW,SAASH,GAAS,CAC1EV,EAAeE,QAAQY,KAAKJ,GAC5B,MAAMK,EAAiBC,EAAqBN,SACtCK,EAAeQ,qBAAqBN,GAC1C,MAAMO,QAAeT,EAAeU,qBAC9BV,EAAeI,oBAAoBK,GACzCnB,QAAQC,IAAK,qBAAoBI,cAAmBnB,KACpDQ,EAAUG,QAAQkB,KAAK,SAAUI,EAAQjC,EAAUmB,EACrD,KAIFX,EAAUG,QAAQE,GAAG,UAAUK,UAAyD,IAAlD,OAAEe,EAAM,OAAEd,EAAQnB,SAAUmC,GAAgBC,EAEhF,GADAtB,QAAQC,IAAK,wBAAuBI,cAAmBgB,KACnDA,IAAmBnC,EAAU,CAC/B,MAAMwB,EAAiBjB,EAAgBI,QAAQQ,SACzCK,EAAeQ,qBAAqBC,EAC5C,KAIFzB,EAAUG,QAAQE,GAAG,OAAOK,UAAmD,IAA5C,IAAEmB,EAAG,OAAElB,EAAQnB,SAAUsC,GAAaC,EAEvE,GADAzB,QAAQC,IAAK,+BAA8BI,cAAmBmB,KAC1DA,IAAgBtC,EAAU,CAC1B,MAAMwB,EAAiBjB,EAAgBI,QAAQQ,GAC/C,GAAIK,EACF,UACQA,EAAegB,gBAAgBH,EACvC,CAAE,MAAOI,GACP3B,QAAQ2B,MAAO,2CAA0CtB,KAAWsB,EACtE,MAEE3B,QAAQ2B,MAAO,uBAAsBtB,oBAE7C,KAIK,KACLX,EAAUG,QAAQ+B,YAAY,IAE/B,CAAC1C,IAGJ,MAaMyB,EAAwBN,IAC5B,MAAMK,EAAiB,IAAImB,kBAgC3B,OA7BAnB,EAAeoB,iBAAiB,gBAAiBC,IAC3CA,EAAMC,YACRhC,QAAQC,IAAK,4BAA2BI,KACxCX,EAAUG,QAAQkB,KAAK,MAAOgB,EAAMC,UAAW9C,EAAUmB,GAC3D,IAIFK,EAAeoB,iBAAiB,SAAUC,IACxC,IAAIE,EAAWC,SAASC,eAAgB,YAAW9B,KAC9C4B,IACHA,EAAWC,SAASE,cAAc,SAClCH,EAAS/B,GAAM,YAAWG,IAC1B4B,EAASI,UAAW,EACpBH,SAASC,eAAe,iBAAiBG,YAAYL,IAEvDA,EAASM,UAAYR,EAAMS,QAAQ,EAAE,IAInCjD,EAAYM,QACdN,EAAYM,QAAQ4C,YAAYC,SAASC,IACvCjC,EAAekC,SAASD,EAAOpD,EAAYM,QAAQ,IAGrDG,QAAQ2B,MAAM,sDAGhBlC,EAAgBI,QAAQQ,GAAUK,EAC3BA,CAAc,EAIjBmC,EAAazC,eAlDFA,WACf,IACE,MAAM0C,QAAeC,UAAUC,aAAaC,aAAa,CACvDC,OAAO,EACPC,OAAO,IAET5D,EAAYM,QAAUiD,EACtBZ,SAASC,eAAe,UAAUI,UAAYO,CAChD,CAAE,MAAOnB,GACP3B,QAAQ2B,MAAM,gFAAqBA,EACrC,GAyCMyB,GACNlB,SAASC,eAAe,WAAWkB,QAAS,EAC5CnB,SAASC,eAAe,QAAQkB,QAAS,EACzC3D,EAAUG,QAAQkB,KAAK,YAAa7B,EAAS,EAG/C,OACEoE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAKvD,GAAG,UAASsD,UACfF,EAAAA,EAAAA,MAAA,QAAMpD,GAAG,cAAcwD,SA5JJtD,UACvB2B,EAAM4B,iBACN,MAAMC,EAAQ7B,EAAM8B,OAAOC,cAAc,SAEzC,IAAKF,EAAMG,MAAMC,OAEf,YADAhE,QAAQC,IAAI,8BAId,MAAMgE,EAAkBL,EAAMG,MAC9B5E,EAAY8E,GAEZjE,QAAQC,IAAI,gBAAiBgE,SACvBpB,IACNnD,EAAUG,QAAQkB,KAAK,YAAakD,GACpCL,EAAMG,MAAQ,EAAE,EA6IsCP,SAAA,EAChDC,EAAAA,EAAAA,KAAA,SAAOS,KAAK,OAAOC,YAAY,YAAYC,UAAQ,KACnDX,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,qBAGZF,EAAAA,EAAAA,MAAA,OAAKpD,GAAG,OAAOmD,QAAM,EAAAG,SAAA,EACnBC,EAAAA,EAAAA,KAAA,SAAOvD,GAAG,SAASmE,UAAQ,EAACC,aAAW,EAACC,OAAO,QAAQC,MAAM,WAC7Df,EAAAA,EAAAA,KAAA,OAAKvD,GAAG,sBAIVoD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6BACJC,EAAAA,EAAAA,KAAA,MAAAD,SACGnE,EAAUoF,KAAIpE,IACboD,EAAAA,EAAAA,KAAA,MAAAD,SAAkBnD,GAATA,YAIX,C","sources":["pages/Testjang.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport './Testjang.css';\r\n\r\nconst Testjang = () => {\r\n  const [roomName, setRoomName] = useState(''); // 방 이름 상태 관리\r\n  const [roomUsers, setRoomUsers] = useState([]); // 방 내 사용자 목록 관리\r\n  const myStreamRef = useRef(null);\r\n  const peerConnections = useRef({}); // 피어 연결 관리\r\n  const socketRef = useRef(null); // socket.io 객체\r\n  const connectedUsers = useRef([]); // 연결된 사용자 목록\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const input = event.target.querySelector(\"input\");\r\n\r\n    if (!input.value.trim()) {\r\n      console.log(\"Room name cannot be empty!\");\r\n      return;  // 방 이름이 비어 있으면 방 입장을 시도하지 않음\r\n    }\r\n\r\n    const enteredRoomName = input.value;\r\n    setRoomName(enteredRoomName);\r\n\r\n    console.log(\"Joining room:\", enteredRoomName);\r\n    await startMedia(); // 미디어 시작 후 방 입장\r\n    socketRef.current.emit('join_room', enteredRoomName); // 방 이름 전송\r\n    input.value = \"\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    // 서버에 연결하고 연결 여부를 확인\r\n    socketRef.current = io(\"http://localhost:4000\");\r\n\r\n    socketRef.current.on(\"connect\", () => {\r\n      console.log(\"Connected to server, socket ID:\", socketRef.current.id);\r\n    });\r\n\r\n    socketRef.current.on(\"disconnect\", () => {\r\n      console.log(\"Disconnected from server\");\r\n    });\r\n\r\n    // 방에 있는 사용자 목록을 받으면 업데이트 및 콘솔에 출력\r\n    socketRef.current.on(\"room_users\", (users) => {\r\n      setRoomUsers(users);\r\n      console.log(`Users in room \"${roomName}\":`, users);\r\n    });\r\n\r\n    // 방 입장 시 서버에서 다른 사용자가 입장했을 때 실행\r\n    socketRef.current.on(\"welcome\", async ({ userId, roomName: joinedRoomName }) => {\r\n      console.log(`User ${userId} joined room: ${joinedRoomName}`);\r\n      if (joinedRoomName === roomName && !connectedUsers.current.includes(userId)) {\r\n        connectedUsers.current.push(userId); // 연결된 사용자 추가\r\n        const peerConnection = createPeerConnection(userId);\r\n        const offer = await peerConnection.createOffer();\r\n        await peerConnection.setLocalDescription(offer);\r\n        console.log(`Sending offer to ${userId} in room: ${roomName}`);\r\n        socketRef.current.emit(\"offer\", offer, roomName, userId); // 특정 사용자에게 offer 전송\r\n      }\r\n    });\r\n\r\n    // 서버에서 offer 수신 시 처리\r\n    socketRef.current.on('offer', async ({ offer, userId, roomName: offerRoomName }) => {\r\n      console.log(`Received offer from ${userId} in room: ${offerRoomName}`);\r\n      if (offerRoomName === roomName && !connectedUsers.current.includes(userId)) { // 같은 방인지 확인\r\n        connectedUsers.current.push(userId); // 연결된 사용자 추가\r\n        const peerConnection = createPeerConnection(userId);\r\n        await peerConnection.setRemoteDescription(offer);\r\n        const answer = await peerConnection.createAnswer();\r\n        await peerConnection.setLocalDescription(answer);\r\n        console.log(`Sending answer to ${userId} in room: ${roomName}`);\r\n        socketRef.current.emit(\"answer\", answer, roomName, userId); // 특정 사용자에게 answer 전송\r\n      }\r\n    });\r\n\r\n    // 서버에서 answer 수신 시 처리\r\n    socketRef.current.on('answer', async ({ answer, userId, roomName: answerRoomName }) => {\r\n      console.log(`Received answer from ${userId} in room: ${answerRoomName}`);\r\n      if (answerRoomName === roomName) {  // 같은 방인지 확인\r\n        const peerConnection = peerConnections.current[userId];\r\n        await peerConnection.setRemoteDescription(answer);\r\n      }\r\n    });\r\n\r\n    // 서버에서 ICE 후보자 수신 시 처리\r\n    socketRef.current.on('ice', async ({ ice, userId, roomName: iceRoomName }) => {\r\n      console.log(`Received ICE candidate from ${userId} in room: ${iceRoomName}`);\r\n      if (iceRoomName === roomName) {\r\n          const peerConnection = peerConnections.current[userId];\r\n          if (peerConnection) {\r\n            try {\r\n              await peerConnection.addIceCandidate(ice);\r\n            } catch (error) {\r\n              console.error(`Error adding received ICE candidate for ${userId}:`, error);\r\n            }\r\n          } else {\r\n              console.error(`Peer connection for ${userId} does not exist.`);\r\n          }\r\n      }\r\n    });\r\n\r\n    // 컴포넌트 언마운트 시 소켓 연결 정리\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, [roomName]);\r\n\r\n  // 사용자 미디어 스트림 가져오기\r\n  const getMedia = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        audio: true,\r\n        video: true,\r\n      });\r\n      myStreamRef.current = stream;  // 내 미디어 스트림 설정\r\n      document.getElementById(\"myFace\").srcObject = stream;  // 내 비디오 화면 설정\r\n    } catch (error) {\r\n      console.error(\"미디어 장치 접근 중 오류 발생\", error);\r\n    }\r\n  };\r\n\r\n  const createPeerConnection = (userId) => {\r\n    const peerConnection = new RTCPeerConnection();\r\n\r\n    // ICE 후보자 이벤트 처리\r\n    peerConnection.addEventListener(\"icecandidate\", (event) => {\r\n      if (event.candidate) {\r\n        console.log(`Sending ICE candidate to ${userId}`);\r\n        socketRef.current.emit(\"ice\", event.candidate, roomName, userId);\r\n      }\r\n    });\r\n\r\n    // 수신된 트랙(비디오) 추가\r\n    peerConnection.addEventListener(\"track\", (event) => {\r\n      let peerFace = document.getElementById(`peerFace-${userId}`);\r\n      if (!peerFace) {\r\n        peerFace = document.createElement(\"video\");\r\n        peerFace.id = `peerFace-${userId}`;\r\n        peerFace.autoplay = true;\r\n        document.getElementById(\"peerContainer\").appendChild(peerFace);\r\n      }\r\n      peerFace.srcObject = event.streams[0];\r\n    });\r\n\r\n    // 스트림 객체가 존재하는지 확인 후 트랙 추가\r\n    if (myStreamRef.current) {\r\n      myStreamRef.current.getTracks().forEach((track) => {\r\n        peerConnection.addTrack(track, myStreamRef.current);\r\n      });\r\n    } else {\r\n      console.error(\"myStreamRef.current is null, unable to add tracks.\");\r\n    }\r\n\r\n    peerConnections.current[userId] = peerConnection;\r\n    return peerConnection;\r\n  };\r\n\r\n  // 방 입장 시 미디어 시작 및 방 입장 요청\r\n  const startMedia = async () => {\r\n    await getMedia();\r\n    document.getElementById(\"welcome\").hidden = true;\r\n    document.getElementById(\"call\").hidden = false;\r\n    socketRef.current.emit('join_room', roomName); // 방 입장 이벤트 서버로 전송\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div id=\"welcome\">\r\n        <form id=\"welcomeForm\" onSubmit={handleFormSubmit}>\r\n          <input type=\"text\" placeholder=\"room name\" required />\r\n          <button>Enter Room</button>\r\n        </form>\r\n      </div>\r\n      <div id=\"call\" hidden>\r\n        <video id=\"myFace\" autoPlay playsInline height=\"150px\" width=\"150px\"></video>\r\n        <div id=\"peerContainer\">\r\n          {/* 연결된 사용자들의 비디오가 추가될 자리 */}\r\n        </div>\r\n      </div>\r\n      <div className='chat'>\r\n        <h3>Connected Users in Room</h3>\r\n        <ul>\r\n          {roomUsers.map(userId => (\r\n            <li key={userId}>{userId}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Testjang;"],"names":["Testjang","roomName","setRoomName","useState","roomUsers","setRoomUsers","myStreamRef","useRef","peerConnections","socketRef","connectedUsers","useEffect","current","io","on","console","log","id","users","async","userId","joinedRoomName","_ref","includes","push","peerConnection","createPeerConnection","offer","createOffer","setLocalDescription","emit","offerRoomName","_ref2","setRemoteDescription","answer","createAnswer","answerRoomName","_ref3","ice","iceRoomName","_ref4","addIceCandidate","error","disconnect","RTCPeerConnection","addEventListener","event","candidate","peerFace","document","getElementById","createElement","autoplay","appendChild","srcObject","streams","getTracks","forEach","track","addTrack","startMedia","stream","navigator","mediaDevices","getUserMedia","audio","video","getMedia","hidden","_jsxs","className","children","_jsx","onSubmit","preventDefault","input","target","querySelector","value","trim","enteredRoomName","type","placeholder","required","autoPlay","playsInline","height","width","map"],"sourceRoot":""}
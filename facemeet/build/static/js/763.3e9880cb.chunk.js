"use strict";(self.webpackChunkmeeting=self.webpackChunkmeeting||[]).push([[763],{6763:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var r=n(5043),o=n(2104),c=(n(6554),n(3216)),s=n(579);const a=()=>{const{meetingId:e}=(0,c.g)(),[t,n]=(0,r.useState)([]),a=(0,r.useRef)(null),i=(0,r.useRef)({}),d=(0,r.useRef)(null),l=(0,r.useRef)([]),[m,u]=(0,r.useState)([]),[f,g]=(0,r.useState)(0),h=t=>{const n=new RTCPeerConnection;return n.addEventListener("icecandidate",(n=>{n.candidate&&(console.log(`Sending ICE candidate to ${t}`),d.current.emit("ice",{ice:n.candidate,roomName:e,toUserId:t}))})),n.addEventListener("track",(e=>{let n=document.getElementById(`peerFace-${t}`);n||(n=document.createElement("video"),n.id=`peerFace-${t}`,n.autoplay=!0,n.playsInline=!0,document.getElementById("peerContainer").appendChild(n)),n.srcObject=e.streams[0]})),i.current[t]=n,n},p=e=>{a.current?a.current.getTracks().forEach((t=>{e.addTrack(t,a.current)})):console.error("myStreamRef.current is null, unable to add tracks.")};(0,r.useEffect)((()=>{if(!e)return void console.error("Error: meetingId is undefined or null");d.current=(0,o.io)("http://localhost:4000"),d.current.on("connect",(()=>{console.log("Connected to server, socket ID:",d.current.id),d.current.emit("join_room",e)})),d.current.on("disconnect",(()=>{console.log("Disconnected from server")})),d.current.on("room_users",(async t=>{n(t),console.log(`Users in room "${e}":`,t),t.forEach((async t=>{if(t!==d.current.id){if(!document.getElementById(`peerFace-${t}`)&&(console.log(`No video found for ${t}. Attempting to reconnect...`),!l.current.includes(t)&&a.current)){l.current.push(t);const n=h(t);p(n);const r=await n.createOffer();await n.setLocalDescription(r),console.log(`Sending offer to ${t} in room: ${e}`),d.current.emit("offer",{offer:r,toUserId:t,roomName:e})}}}))})),d.current.on("welcome",(async t=>{let{userId:n}=t;if(console.log(`User ${n} joined room: ${e}`),!l.current.includes(n)&&a.current){l.current.push(n);const t=h(n);p(t);const r=await t.createOffer();await t.setLocalDescription(r),console.log(`Sending offer to ${n} in room: ${e}`),d.current.emit("offer",{offer:r,toUserId:n,roomName:e})}}));const t=async()=>{try{const e=await navigator.mediaDevices.getUserMedia({audio:!0,video:!0});a.current=e,document.getElementById("myFace").srcObject=e,console.log("Media stream obtained.")}catch(e){console.error("\ubbf8\ub514\uc5b4 \uc7a5\uce58 \uc811\uadfc \uc911 \uc624\ub958 \ubc1c\uc0dd",e)}};return d.current.on("offer",(async n=>{let{offer:r,userId:o}=n;if(console.log(`Received offer from ${o} in room: ${e}`),a.current||await t(),!l.current.includes(o)){l.current.push(o);const t=h(o);p(t),await t.setRemoteDescription(new RTCSessionDescription(r));const n=await t.createAnswer();await t.setLocalDescription(n),console.log(`Sending answer to ${o} in room: ${e}`),d.current.emit("answer",{answer:n,toUserId:o,roomName:e})}})),d.current.on("answer",(async n=>{let{answer:r,userId:o}=n;console.log(`Received answer from ${o} in room: ${e}`),a.current||await t();const c=i.current[o];c?await c.setRemoteDescription(new RTCSessionDescription(r)):console.error(`Peer connection for ${o} does not exist.`)})),d.current.on("ice",(async t=>{let{ice:n,userId:r}=t;console.log(`Received ICE candidate from ${r} in room: ${e}`);const o=i.current[r];if(o)try{await o.addIceCandidate(new RTCIceCandidate(n))}catch(c){console.error(`Error adding received ICE candidate for ${r}:, error`)}else console.error(`Peer connection for ${r} does not exist.`)})),d.current.on("msg",(e=>{u((t=>[...t,{id:e.id,message:e.message}]))})),t().then((()=>{console.log("Media stream obtained.")})).catch((e=>{console.error("Error obtaining media stream:",e)})),()=>{d.current.disconnect()}}),[e]);(0,r.useEffect)((()=>{const e=setInterval((()=>{(async()=>{const e=document.getElementById("peerContainer").getElementsByTagName("video");for(let n of e)if(n.readyState>=2){const e=document.createElement("canvas");e.width=n.videoWidth,e.height=n.videoHeight,e.getContext("2d").drawImage(n,0,0,e.width,e.height);const r=e.toDataURL("image/jpeg");try{const e=await fetch("http://localhost:4001/analyze_emotion",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({frameData:r})}),t=await e.json();t.emotionScore&&g(t.emotionScore)}catch(t){console.error("Error sending frame:",t)}}})()}),5e3);return()=>clearInterval(e)}),[]);return(0,s.jsxs)("div",{className:"container-fluid",children:[(0,s.jsxs)("div",{id:"call",children:[(0,s.jsx)("video",{id:"myFace",autoPlay:!0,playsInline:!0,height:"150px",width:"150px"}),(0,s.jsx)("div",{id:"peerContainer"})]}),(0,s.jsxs)("div",{children:[(0,s.jsxs)("ul",{className:"peerBox",children:[(0,s.jsx)("p",{children:"Connected Users in Room"}),t.map((e=>(0,s.jsx)("li",{children:e},e)))]}),(0,s.jsxs)("div",{className:"chatBox",children:[(0,s.jsx)("div",{className:"chat",children:(0,s.jsx)("div",{className:"messages",children:m.map(((e,t)=>(0,s.jsxs)("p",{children:[(0,s.jsxs)("strong",{children:[e.id,":"]})," ",e.message]},t)))})}),(0,s.jsx)("div",{className:"sendBtn",children:(0,s.jsxs)("form",{onSubmit:t=>{t.preventDefault();let n=document.getElementById("chatInput").value,r=e;d.current.emit("private",r,n),document.getElementById("chatInput").value=""},children:[(0,s.jsx)("input",{type:"text",id:"chatInput",className:"form-control mb-3",placeholder:"Enter your message",autoComplete:"off"}),(0,s.jsx)("button",{type:"submit",className:"btn btn-primary",children:"Send"})]})})]}),(0,s.jsx)("div",{className:"scoreBox "+(f<=30?"red":f<=70?"yellow":"green"),children:f})]})]})}},6554:()=>{}}]);
//# sourceMappingURL=763.3e9880cb.chunk.js.map
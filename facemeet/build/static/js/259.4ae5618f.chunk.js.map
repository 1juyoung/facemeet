{"version":3,"file":"static/js/259.4ae5618f.chunk.js","mappings":"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","sources":["pages/Join.js"],"sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport background from '../login_background.png'; // 배경 이미지를 가져옵니다.\r\nimport logo from '../Logo.png'; // 로고 이미지를 가져옵니다.\r\nimport './Login.css'; // 스타일을 가져옵니다.\r\n\r\nclass RegistrationForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isSubmitEnabled: false,\r\n            userId: '',\r\n            pw1: '',\r\n            pw2: '',\r\n            pwMatch: '',\r\n        };\r\n    }\r\n\r\n    checkDuplicate = async () => {\r\n        const { userId } = this.state;\r\n\r\n        if (!userId) {\r\n            alert('ID를 입력하세요.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:4000/register/checkDuplicate', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ userId }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (!result.isDuplicate) {\r\n                alert('사용 가능한 ID입니다.');\r\n                this.setState({ isSubmitEnabled: true });\r\n                this.updateSubmitButton();\r\n            } else {\r\n                alert('중복된 ID입니다.');\r\n                this.setState({ isSubmitEnabled: false });\r\n            }\r\n        } catch (error) {\r\n            console.error('Error checking duplicate:', error);\r\n            alert('서버 오류가 발생했습니다.');\r\n        }\r\n    };\r\n\r\n    updateSubmitButton = () => {\r\n        const { userId, pw1, pw2 } = this.state;\r\n        const pwMatch = '';\r\n\r\n        const isUpdateSubmitEnabled =\r\n            this.state.isSubmitEnabled &&\r\n            userId &&\r\n            pw1.length >= 4 &&\r\n            /^(?=.*[A-Za-z])(?=.*\\d)/.test(pw1) &&\r\n            pw1 === pw2;\r\n\r\n        if (pw1.length === 0) {\r\n            this.setState({ pwMatch: '' });\r\n        }\r\n\r\n        if (pw1.length > 0 && !(pw1.length >= 4 && /^(?=.*[A-Za-z])(?=.*\\d)/.test(pw1))) {\r\n            this.setState({\r\n                pwMatch: '비밀번호는 영어와 숫자 조합으로 4글자 이상이어야 합니다.',\r\n            });\r\n        } else {\r\n            this.setState({ pwMatch: '' });\r\n\r\n            if (pw1 !== pw2) {\r\n                this.setState({ pwMatch: '비밀번호 1과 비밀번호 2가 일치하지 않습니다.' });\r\n            }\r\n        }\r\n\r\n        this.setState({ pwMatch });\r\n        const submitBtn = document.getElementById('submitBtn');\r\n        submitBtn.disabled = !isUpdateSubmitEnabled;\r\n    };\r\n\r\n    handleInputChange = (event) => {\r\n        const { id, value } = event.target;\r\n        this.setState({ [id]: value }, this.updateSubmitButton);\r\n    };\r\n\r\n    registerUser = async () => {\r\n        const { userId, pw1, pw2 } = this.state;\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:4000/register', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ userId, pw1, pw2 }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                alert(result.message);\r\n            } else {\r\n                alert(result.error);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error during registration:', error);\r\n            alert('서버 오류가 발생했습니다.');\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <img src={background} alt=\"로그인 배경 이미지\" style={{ height: \"46.3rem\", width: \"100%\", overflowY: \"hidden\", }} /> {/* 배경 이미지 */}\r\n                <box>\r\n                    <logo><img src={logo} alt=\"로고\"></img></logo> {/* 로고 */}\r\n                    <form style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\r\n                        <label htmlFor=\"userId\">ID:</label>\r\n                        <input type=\"text\" id=\"userId\" name=\"userId2\" onChange={this.handleInputChange} required />\r\n                        <button type=\"button\" onClick={this.checkDuplicate}>\r\n                            중복 확인\r\n                        </button>\r\n                        <br />\r\n                        <label htmlFor=\"pw1\">비밀번호1:</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"pw1\"\r\n                            name=\"pw1\"\r\n                            minLength=\"4\"\r\n                            onChange={this.handleInputChange}\r\n                            required\r\n                        />\r\n                        <br />\r\n                        <label htmlFor=\"pw2\">비밀번호2:</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"pw2\"\r\n                            name=\"pw2\"\r\n                            minLength=\"4\"\r\n                            onChange={this.handleInputChange}\r\n                            required\r\n                        />\r\n                        <br />\r\n                        <span>{this.state.pwMatch}</span>\r\n                        <br />\r\n                        <button\r\n                            type=\"button\" id=\"submitBtn\" disabled={!this.state.isSubmitEnabled} onClick={this.registerUser}\r\n                            style={{ color: '#7C7C7C', fontSize: '0.8rem' }} >\r\n                            회원가입\r\n                        </button>\r\n                    </form>\r\n                </box >\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegistrationForm;"],"names":["RegistrationForm","React","constructor","props","super","checkDuplicate","async","userId","this","state","response","fetch","method","headers","body","JSON","stringify","json","isDuplicate","alert","setState","isSubmitEnabled","updateSubmitButton","error","console","pw1","pw2","isUpdateSubmitEnabled","length","test","pwMatch","document","getElementById","disabled","handleInputChange","event","id","value","target","registerUser","result","ok","message","render","_jsxs","children","_jsx","src","background","alt","style","height","width","overflowY","logo","display","flexDirection","alignItems","justifyContent","htmlFor","type","name","onChange","required","onClick","minLength","color","fontSize"],"sourceRoot":""}
{"version":3,"file":"static/js/66.b14b2696.chunk.js","mappings":"6LA2GA,QApGA,WACE,MAAMA,GAAWC,EAAAA,EAAAA,OACVC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAYC,IAAiBJ,EAAAA,EAAAA,WAAS,GAEvCK,EAAcC,UAClBC,EAAMC,iBAEN,IAEE,MAAMC,QAAiBC,MAAM,8BAA+B,CAC1DC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEjB,SAAQG,WAAUE,iBAI3C,GAAIM,EAASO,GAAI,CAEf,MAAMC,QAAaR,EAASS,OACtBC,EAAQF,EAAKE,MAEnBC,aAAaC,QAAQ,QAASF,GAC9BC,aAAaC,QAAQ,SAAUJ,EAAKnB,QAEpCwB,OAAOC,SAASC,KAAO,OACzB,MAEEC,MAAM,8GAENC,QAAQC,MAAM,kCAAUlB,EAASmB,WAErC,CAAE,MAAOD,GACPD,QAAQC,MAAM,4BAASA,EACzB,GAUF,OACEE,EAAAA,EAAAA,MAAA,QAAMC,SAAUzB,EAAa0B,UAAU,SAASC,MAAO,CAAEC,SAAU,QAASC,SAAA,CAAC,KAC3EC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAYC,IAAI,qDAAaN,MAAO,CAAEO,OAAQ,UAAWC,MAAO,OAAQC,UAAW,YAAe,KAE5GZ,EAAAA,EAAAA,MAAA,OAAAK,SAAA,CAAK,KACHC,EAAAA,EAAAA,KAAA,QAAAD,UAAMC,EAAAA,EAAAA,KAAA,OAAKC,IAAKM,EAAMJ,IAAI,mBAAkB,KAC5CT,EAAAA,EAAAA,MAAA,QAAAK,SAAA,CAAM,KACJC,EAAAA,EAAAA,KAAA,SAEEQ,KAAK,OACLC,KAAK,SAELC,YAAY,QACZC,MAAOhD,EACPiD,SAAWC,GAAMjD,EAAUiD,EAAEC,OAAOH,OACpCI,UAAQ,QAIZrB,EAAAA,EAAAA,MAAA,QAAAK,SAAA,CAAM,KACJC,EAAAA,EAAAA,KAAA,SACEQ,KAAK,WAELC,KAAK,WAELC,YAAY,WACZC,MAAO7C,EACP8C,SAAWC,GAAM9C,EAAY8C,EAAEC,OAAOH,aAI1CX,EAAAA,EAAAA,KAAA,UAAQgB,GAAG,WAAWnB,MAAO,CAAEoB,MAAO,UAAWC,SAAU,UAAYC,QAASjD,EAAY6B,SAAC,uBAAY,KAEzGC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,iDAA0C,KAEjDC,EAAAA,EAAAA,KAAA,UAAQgB,GAAG,cAAcnB,MAAO,CAAEoB,MAAO,WAAYlB,SAAC,4DAAmB,KACzEC,EAAAA,EAAAA,KAAA,SAAOoB,QAAQ,aAAYrB,SAAC,kBAC5BC,EAAAA,EAAAA,KAAA,SACEQ,KAAK,WACLQ,GAAG,aACHP,KAAK,aACLY,QAASrD,EACT4C,SAAWC,GAAM5C,EAAc4C,EAAEC,OAAOO,WAGpC,MAAErB,EAAAA,EAAAA,KAAA,QAAMmB,QAlDIG,KACtB7D,EAAS,QAAQ,EAiD0BsC,SAAC,8BACxCC,EAAAA,EAAAA,KAAA,QAAMmB,QAASjD,EAAY6B,SAAC,qCAC5BC,EAAAA,EAAAA,KAAA,QAAMmB,QAASjD,EAAY6B,SAAC,+CAIpC,C","sources":["pages/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport background from '../login_background.png'; // 배경 이미지를 가져옵니다.\r\nimport logo from '../Logo.png'; // 로고 이미지를 가져옵니다.\r\nimport './Login.css'; // 스타일을 가져옵니다.\r\nimport { useNavigate } from 'react-router-dom'; // 페이지 이동을 위한 훅을 가져옵니다.\r\n\r\n\r\nfunction Login() {\r\n  const navigate = useNavigate(); // 페이지 이동 함수를 초기화합니다.\r\n  const [userId, setUserId] = useState(''); // 이메일 입력을 위한 상태를 설정합니다.\r\n  const [password, setPassword] = useState(''); // 비밀번호 입력을 위한 상태를 설정합니다.\r\n  const [rememberMe, setRememberMe] = useState(false);\r\n  // 로그인 시도를 처리하는 함수입니다.\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      // 서버에 로그인 요청 보내기\r\n      const response = await fetch(\"http://localhost:4000/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ userId, password, rememberMe }),\r\n      });\r\n\r\n\r\n      if (response.ok) {\r\n        // 로그인 성공 시 서버로부터의 응답을 처리\r\n        const data = await response.json();\r\n        const token = data.token;\r\n\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('userId', data.userId);\r\n\r\n        window.location.href = \"/Home\";\r\n      } else {\r\n        // 로그인 실패시\r\n        alert(\"올바른 아이디와 비밀번호를 입력하세요.\");\r\n\r\n        console.error(\"로그인 실패\", response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"오류 발생\", error);\r\n    }\r\n  };\r\n\r\n\r\n  // 회원가입 버튼 클릭을 처리하는 함수입니다.\r\n  const handleJoinClick = () => {\r\n    navigate('/join'); // 회원가입 페이지로 이동합니다.\r\n  };\r\n\r\n\r\n  return (\r\n    <form onSubmit={handleLogin} className=\"Before\" style={{ position: 'flex' }}> {/* 메인 컨테이너 */}\r\n      <img src={background} alt=\"로그인 배경 이미지\" style={{ height: \"46.3rem\", width: \"100%\", overflowY: \"hidden\", }} /> {/* 배경 이미지 */}\r\n\r\n      <box> {/* 로그인 폼을 위한 컨테이너 */}\r\n        <logo><img src={logo} alt=\"로고\"></img></logo> {/* 로고 */}\r\n        <box2> {/* 이메일 입력을 위한 컨테이너 */}\r\n          <input\r\n\r\n            type=\"text\"\r\n            name=\"userId\"\r\n\r\n            placeholder=\"Email\"\r\n            value={userId}\r\n            onChange={(e) => setUserId(e.target.value)}\r\n            required\r\n          >\r\n          </input>\r\n        </box2>\r\n        <box3> {/* 비밀번호 입력을 위한 컨테이너 */}\r\n          <input\r\n            type=\"password\"\r\n\r\n            name=\"password\"\r\n\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}>\r\n          </input>\r\n        </box3>\r\n\r\n        <button id=\"idButton\" style={{ color: '#7C7C7C', fontSize: '0.8rem' }} onClick={handleLogin}>로그인</button> {/* 로그인 버튼 */}\r\n\r\n        <text1>______________  또는  ______________</text1> {/* 또는 구분선 */}\r\n\r\n        <button id=\"kakaoButton\" style={{ color: '#7C7C7C' }}>카카오톡으로 로그인</button> {/* 카카오톡으로 로그인 버튼 */}\r\n        <label htmlFor=\"rememberMe\">Remember me:</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"rememberMe\"\r\n          name=\"rememberMe\"\r\n          checked={rememberMe}\r\n          onChange={(e) => setRememberMe(e.target.checked)}\r\n        />\r\n\r\n        {/**/}  <span onClick={handleJoinClick}>회원가입</span>\r\n        <span onClick={handleLogin}>아이디 찾기</span>\r\n        <span onClick={handleLogin}>비밀번호 찾기</span>\r\n      </box>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"names":["navigate","useNavigate","userId","setUserId","useState","password","setPassword","rememberMe","setRememberMe","handleLogin","async","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","data","json","token","localStorage","setItem","window","location","href","alert","console","error","statusText","_jsxs","onSubmit","className","style","position","children","_jsx","src","background","alt","height","width","overflowY","logo","type","name","placeholder","value","onChange","e","target","required","id","color","fontSize","onClick","htmlFor","checked","handleJoinClick"],"sourceRoot":""}
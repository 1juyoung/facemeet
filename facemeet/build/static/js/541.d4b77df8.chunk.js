"use strict";(self.webpackChunkmeeting=self.webpackChunkmeeting||[]).push([[541],{9541:(e,n,o)=>{o.r(n),o.d(n,{default:()=>i});var r=o(5043),t=o(2104),c=(o(6554),o(579));const i=()=>{const[e,n]=(0,r.useState)(""),[o,i]=(0,r.useState)([]),s=(0,r.useRef)(null),a=(0,r.useRef)({}),d=(0,r.useRef)(null),l=(0,r.useRef)([]);(0,r.useEffect)((()=>(d.current=(0,t.io)("http://localhost:4000"),d.current.on("connect",(()=>{console.log("Connected to server, socket ID:",d.current.id)})),d.current.on("disconnect",(()=>{console.log("Disconnected from server")})),d.current.on("room_users",(n=>{i(n),console.log(`Users in room "${e}":`,n)})),d.current.on("welcome",(async n=>{let{userId:o,roomName:r}=n;if(console.log(`User ${o} joined room: ${r}`),r===e&&!l.current.includes(o)){l.current.push(o);const n=u(o),r=await n.createOffer();await n.setLocalDescription(r),console.log(`Sending offer to ${o} in room: ${e}`),d.current.emit("offer",r,e,o)}})),d.current.on("offer",(async n=>{let{offer:o,userId:r,roomName:t}=n;if(console.log(`Received offer from ${r} in room: ${t}`),t===e&&!l.current.includes(r)){l.current.push(r);const n=u(r);await n.setRemoteDescription(o);const t=await n.createAnswer();await n.setLocalDescription(t),console.log(`Sending answer to ${r} in room: ${e}`),d.current.emit("answer",t,e,r)}})),d.current.on("answer",(async n=>{let{answer:o,userId:r,roomName:t}=n;if(console.log(`Received answer from ${r} in room: ${t}`),t===e){const e=a.current[r];await e.setRemoteDescription(o)}})),d.current.on("ice",(async n=>{let{ice:o,userId:r,roomName:t}=n;if(console.log(`Received ICE candidate from ${r} in room: ${t}`),t===e){const e=a.current[r];if(e)try{await e.addIceCandidate(o)}catch(c){console.error(`Error adding received ICE candidate for ${r}:`,c)}else console.error(`Peer connection for ${r} does not exist.`)}})),()=>{d.current.disconnect()})),[e]);const u=n=>{const o=new RTCPeerConnection;return o.addEventListener("icecandidate",(o=>{o.candidate&&(console.log(`Sending ICE candidate to ${n}`),d.current.emit("ice",o.candidate,e,n))})),o.addEventListener("track",(e=>{let o=document.getElementById(`peerFace-${n}`);o||(o=document.createElement("video"),o.id=`peerFace-${n}`,o.autoplay=!0,document.getElementById("peerContainer").appendChild(o)),o.srcObject=e.streams[0]})),s.current?s.current.getTracks().forEach((e=>{o.addTrack(e,s.current)})):console.error("myStreamRef.current is null, unable to add tracks."),a.current[n]=o,o},m=async()=>{await(async()=>{try{const e=await navigator.mediaDevices.getUserMedia({audio:!0,video:!0});s.current=e,document.getElementById("myFace").srcObject=e}catch(e){console.error("\ubbf8\ub514\uc5b4 \uc7a5\uce58 \uc811\uadfc \uc911 \uc624\ub958 \ubc1c\uc0dd",e)}})(),document.getElementById("welcome").hidden=!0,document.getElementById("call").hidden=!1,d.current.emit("join_room",e)};return(0,c.jsxs)("div",{className:"container-fluid",children:[(0,c.jsx)("div",{id:"welcome",children:(0,c.jsxs)("form",{id:"welcomeForm",onSubmit:async e=>{e.preventDefault();const o=e.target.querySelector("input");if(!o.value.trim())return void console.log("Room name cannot be empty!");const r=o.value;n(r),console.log("Joining room:",r),await m(),d.current.emit("join_room",r),o.value=""},children:[(0,c.jsx)("input",{type:"text",placeholder:"room name",required:!0}),(0,c.jsx)("button",{children:"Enter Room"})]})}),(0,c.jsxs)("div",{id:"call",hidden:!0,children:[(0,c.jsx)("video",{id:"myFace",autoPlay:!0,playsInline:!0,height:"150px",width:"150px"}),(0,c.jsx)("div",{id:"peerContainer"})]}),(0,c.jsxs)("div",{className:"chat",children:[(0,c.jsx)("h3",{children:"Connected Users in Room"}),(0,c.jsx)("ul",{children:o.map((e=>(0,c.jsx)("li",{children:e},e)))})]})]})}},6554:()=>{}}]);
//# sourceMappingURL=541.d4b77df8.chunk.js.map